/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IProductEngine {
  export type ProductDeltaStruct = {
    productId: bigint;
    subaccount: BytesLike;
    amountDelta: bigint;
    vQuoteDelta: bigint;
  };

  export type ProductDeltaStructOutput = [
    productId: bigint,
    subaccount: string,
    amountDelta: bigint,
    vQuoteDelta: bigint
  ] & {
    productId: bigint;
    subaccount: string;
    amountDelta: bigint;
    vQuoteDelta: bigint;
  };
}

export declare namespace IPerpEngine {
  export type BalanceStruct = {
    amount: bigint;
    vQuoteBalance: bigint;
    lastCumulativeFundingX18: bigint;
  };

  export type BalanceStructOutput = [
    amount: bigint,
    vQuoteBalance: bigint,
    lastCumulativeFundingX18: bigint
  ] & {
    amount: bigint;
    vQuoteBalance: bigint;
    lastCumulativeFundingX18: bigint;
  };

  export type LpBalanceStruct = {
    amount: bigint;
    lastCumulativeFundingX18: bigint;
  };

  export type LpBalanceStructOutput = [
    amount: bigint,
    lastCumulativeFundingX18: bigint
  ] & { amount: bigint; lastCumulativeFundingX18: bigint };

  export type LpStateStruct = {
    supply: bigint;
    lastCumulativeFundingX18: bigint;
    cumulativeFundingPerLpX18: bigint;
    base: bigint;
    quote: bigint;
  };

  export type LpStateStructOutput = [
    supply: bigint,
    lastCumulativeFundingX18: bigint,
    cumulativeFundingPerLpX18: bigint,
    base: bigint,
    quote: bigint
  ] & {
    supply: bigint;
    lastCumulativeFundingX18: bigint;
    cumulativeFundingPerLpX18: bigint;
    base: bigint;
    quote: bigint;
  };

  export type StateStruct = {
    cumulativeFundingLongX18: bigint;
    cumulativeFundingShortX18: bigint;
    availableSettle: bigint;
    openInterest: bigint;
  };

  export type StateStructOutput = [
    cumulativeFundingLongX18: bigint,
    cumulativeFundingShortX18: bigint,
    availableSettle: bigint,
    openInterest: bigint
  ] & {
    cumulativeFundingLongX18: bigint;
    cumulativeFundingShortX18: bigint;
    availableSettle: bigint;
    openInterest: bigint;
  };
}

export interface IPerpEngineInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "applyDeltas"
      | "burnLp"
      | "decomposeLps"
      | "getBalance"
      | "getBalanceAmount"
      | "getBalances"
      | "getClearinghouse"
      | "getEngineType"
      | "getLpState"
      | "getOrderbook"
      | "getPositionPnl"
      | "getProductIds"
      | "getSettlementState"
      | "getStateAndBalance"
      | "getStatesAndBalances"
      | "hasBalance"
      | "initialize"
      | "manualAssert"
      | "mintLp"
      | "settlePnl"
      | "socializeSubaccount"
      | "swapLp(uint32,int128,int128)"
      | "swapLp(uint32,int128,int128,int128,int128)"
      | "updateProduct"
      | "updateStates"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "AddProduct"): EventFragment;

  encodeFunctionData(
    functionFragment: "applyDeltas",
    values: [IProductEngine.ProductDeltaStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "burnLp",
    values: [bigint, BytesLike, bigint]
  ): string;
  encodeFunctionData(
    functionFragment: "decomposeLps",
    values: [BytesLike, BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values: [bigint, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalanceAmount",
    values: [bigint, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalances",
    values: [bigint, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getClearinghouse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEngineType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLpState",
    values: [bigint]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderbook",
    values: [bigint]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionPnl",
    values: [bigint, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProductIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSettlementState",
    values: [bigint, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStateAndBalance",
    values: [bigint, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStatesAndBalances",
    values: [bigint, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasBalance",
    values: [bigint, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "manualAssert",
    values: [bigint[]]
  ): string;
  encodeFunctionData(
    functionFragment: "mintLp",
    values: [bigint, BytesLike, bigint, bigint, bigint]
  ): string;
  encodeFunctionData(
    functionFragment: "settlePnl",
    values: [BytesLike, bigint]
  ): string;
  encodeFunctionData(
    functionFragment: "socializeSubaccount",
    values: [BytesLike, bigint]
  ): string;
  encodeFunctionData(
    functionFragment: "swapLp(uint32,int128,int128)",
    values: [bigint, bigint, bigint]
  ): string;
  encodeFunctionData(
    functionFragment: "swapLp(uint32,int128,int128,int128,int128)",
    values: [
      bigint,
      bigint,
      bigint,
      bigint,
      bigint
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProduct",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStates",
    values: [bigint, bigint[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "applyDeltas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burnLp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decomposeLps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBalanceAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClearinghouse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEngineType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLpState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOrderbook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionPnl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProductIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSettlementState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStateAndBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStatesAndBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "manualAssert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintLp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "settlePnl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "socializeSubaccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapLp(uint32,int128,int128)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapLp(uint32,int128,int128,int128,int128)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStates",
    data: BytesLike
  ): Result;
}

export namespace AddProductEvent {
  export type InputTuple = [productId: bigint];
  export type OutputTuple = [productId: bigint];
  export interface OutputObject {
    productId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IPerpEngine extends BaseContract {
  connect(runner?: ContractRunner | null): IPerpEngine;
  waitForDeployment(): Promise<this>;

  interface: IPerpEngineInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  applyDeltas: TypedContractMethod<
    [deltas: IProductEngine.ProductDeltaStruct[]],
    [void],
    "nonpayable"
  >;

  burnLp: TypedContractMethod<
    [productId: bigint, subaccount: BytesLike, amountLp: bigint],
    [[bigint, bigint]],
    "nonpayable"
  >;

  decomposeLps: TypedContractMethod<
    [liquidatee: BytesLike, liquidator: BytesLike, feeCalculator: AddressLike],
    [bigint],
    "nonpayable"
  >;

  getBalance: TypedContractMethod<
    [productId: bigint, subaccount: BytesLike],
    [IPerpEngine.BalanceStructOutput],
    "view"
  >;

  getBalanceAmount: TypedContractMethod<
    [productId: bigint, subaccount: BytesLike],
    [bigint],
    "view"
  >;

  getBalances: TypedContractMethod<
    [productId: bigint, subaccount: BytesLike],
    [[IPerpEngine.LpBalanceStructOutput, IPerpEngine.BalanceStructOutput]],
    "view"
  >;

  getClearinghouse: TypedContractMethod<[], [string], "view">;

  getEngineType: TypedContractMethod<[], [bigint], "view">;

  getLpState: TypedContractMethod<
    [productId: bigint],
    [IPerpEngine.LpStateStructOutput],
    "view"
  >;

  getOrderbook: TypedContractMethod<
    [productId: bigint],
    [string],
    "view"
  >;

  getPositionPnl: TypedContractMethod<
    [productId: bigint, subaccount: BytesLike],
    [bigint],
    "view"
  >;

  getProductIds: TypedContractMethod<[], [bigint[]], "view">;

  getSettlementState: TypedContractMethod<
    [productId: bigint, subaccount: BytesLike],
    [
      [
        bigint,
        IPerpEngine.LpStateStructOutput,
        IPerpEngine.LpBalanceStructOutput,
        IPerpEngine.StateStructOutput,
        IPerpEngine.BalanceStructOutput
      ] & {
        availableSettle: bigint;
        lpState: IPerpEngine.LpStateStructOutput;
        lpBalance: IPerpEngine.LpBalanceStructOutput;
        state: IPerpEngine.StateStructOutput;
        balance: IPerpEngine.BalanceStructOutput;
      }
    ],
    "view"
  >;

  getStateAndBalance: TypedContractMethod<
    [productId: bigint, subaccount: BytesLike],
    [[IPerpEngine.StateStructOutput, IPerpEngine.BalanceStructOutput]],
    "view"
  >;

  getStatesAndBalances: TypedContractMethod<
    [productId: bigint, subaccount: BytesLike],
    [
      [
        IPerpEngine.LpStateStructOutput,
        IPerpEngine.LpBalanceStructOutput,
        IPerpEngine.StateStructOutput,
        IPerpEngine.BalanceStructOutput
      ]
    ],
    "view"
  >;

  hasBalance: TypedContractMethod<
    [productId: bigint, subaccount: BytesLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _clearinghouse: AddressLike,
      _quote: AddressLike,
      _endpoint: AddressLike,
      _admin: AddressLike,
      _fees: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  manualAssert: TypedContractMethod<
    [openInterests: bigint[]],
    [void],
    "view"
  >;

  mintLp: TypedContractMethod<
    [
      productId: bigint,
      subaccount: BytesLike,
      amountBase: bigint,
      quoteAmountLow: bigint,
      quoteAmountHigh: bigint
    ],
    [void],
    "nonpayable"
  >;

  settlePnl: TypedContractMethod<
    [subaccount: BytesLike, productIds: bigint],
    [bigint],
    "nonpayable"
  >;

  socializeSubaccount: TypedContractMethod<
    [subaccount: BytesLike, insurance: bigint],
    [bigint],
    "nonpayable"
  >;

  "swapLp(uint32,int128,int128)": TypedContractMethod<
    [
      productId: bigint,
      baseDelta: bigint,
      quoteDelta: bigint
    ],
    [[bigint, bigint]],
    "nonpayable"
  >;

  "swapLp(uint32,int128,int128,int128,int128)": TypedContractMethod<
    [
      productId: bigint,
      amount: bigint,
      priceX18: bigint,
      sizeIncrement: bigint,
      lpSpreadX18: bigint
    ],
    [[bigint, bigint]],
    "nonpayable"
  >;

  updateProduct: TypedContractMethod<[txn: BytesLike], [void], "nonpayable">;

  updateStates: TypedContractMethod<
    [dt: bigint, avgPriceDiffs: bigint[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "applyDeltas"
  ): TypedContractMethod<
    [deltas: IProductEngine.ProductDeltaStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "burnLp"
  ): TypedContractMethod<
    [productId: bigint, subaccount: BytesLike, amountLp: bigint],
    [[bigint, bigint]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decomposeLps"
  ): TypedContractMethod<
    [liquidatee: BytesLike, liquidator: BytesLike, feeCalculator: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<
    [productId: bigint, subaccount: BytesLike],
    [IPerpEngine.BalanceStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBalanceAmount"
  ): TypedContractMethod<
    [productId: bigint, subaccount: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBalances"
  ): TypedContractMethod<
    [productId: bigint, subaccount: BytesLike],
    [[IPerpEngine.LpBalanceStructOutput, IPerpEngine.BalanceStructOutput]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getClearinghouse"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getEngineType"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLpState"
  ): TypedContractMethod<
    [productId: bigint],
    [IPerpEngine.LpStateStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOrderbook"
  ): TypedContractMethod<[productId: bigint], [string], "view">;
  getFunction(
    nameOrSignature: "getPositionPnl"
  ): TypedContractMethod<
    [productId: bigint, subaccount: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProductIds"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getSettlementState"
  ): TypedContractMethod<
    [productId: bigint, subaccount: BytesLike],
    [
      [
        bigint,
        IPerpEngine.LpStateStructOutput,
        IPerpEngine.LpBalanceStructOutput,
        IPerpEngine.StateStructOutput,
        IPerpEngine.BalanceStructOutput
      ] & {
        availableSettle: bigint;
        lpState: IPerpEngine.LpStateStructOutput;
        lpBalance: IPerpEngine.LpBalanceStructOutput;
        state: IPerpEngine.StateStructOutput;
        balance: IPerpEngine.BalanceStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStateAndBalance"
  ): TypedContractMethod<
    [productId: bigint, subaccount: BytesLike],
    [[IPerpEngine.StateStructOutput, IPerpEngine.BalanceStructOutput]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStatesAndBalances"
  ): TypedContractMethod<
    [productId: bigint, subaccount: BytesLike],
    [
      [
        IPerpEngine.LpStateStructOutput,
        IPerpEngine.LpBalanceStructOutput,
        IPerpEngine.StateStructOutput,
        IPerpEngine.BalanceStructOutput
      ]
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasBalance"
  ): TypedContractMethod<
    [productId: bigint, subaccount: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _clearinghouse: AddressLike,
      _quote: AddressLike,
      _endpoint: AddressLike,
      _admin: AddressLike,
      _fees: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "manualAssert"
  ): TypedContractMethod<[openInterests: bigint[]], [void], "view">;
  getFunction(
    nameOrSignature: "mintLp"
  ): TypedContractMethod<
    [
      productId: bigint,
      subaccount: BytesLike,
      amountBase: bigint,
      quoteAmountLow: bigint,
      quoteAmountHigh: bigint
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "settlePnl"
  ): TypedContractMethod<
    [subaccount: BytesLike, productIds: bigint],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "socializeSubaccount"
  ): TypedContractMethod<
    [subaccount: BytesLike, insurance: bigint],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapLp(uint32,int128,int128)"
  ): TypedContractMethod<
    [
      productId: bigint,
      baseDelta: bigint,
      quoteDelta: bigint
    ],
    [[bigint, bigint]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapLp(uint32,int128,int128,int128,int128)"
  ): TypedContractMethod<
    [
      productId: bigint,
      amount: bigint,
      priceX18: bigint,
      sizeIncrement: bigint,
      lpSpreadX18: bigint
    ],
    [[bigint, bigint]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateProduct"
  ): TypedContractMethod<[txn: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateStates"
  ): TypedContractMethod<
    [dt: bigint, avgPriceDiffs: bigint[]],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AddProduct"
  ): TypedContractEvent<
    AddProductEvent.InputTuple,
    AddProductEvent.OutputTuple,
    AddProductEvent.OutputObject
  >;

  filters: {
    "AddProduct(uint32)": TypedContractEvent<
      AddProductEvent.InputTuple,
      AddProductEvent.OutputTuple,
      AddProductEvent.OutputObject
    >;
    AddProduct: TypedContractEvent<
      AddProductEvent.InputTuple,
      AddProductEvent.OutputTuple,
      AddProductEvent.OutputObject
    >;
  };
}
