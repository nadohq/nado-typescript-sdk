/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ILBA {
  export type ConfigStruct = {
    depositStartTime: BigNumberish;
    depositEndTime: BigNumberish;
    withdrawEndTime: BigNumberish;
    lpVestStartTime: BigNumberish;
    lpVestEndTime: BigNumberish;
  };

  export type ConfigStructOutput = [
    depositStartTime: bigint,
    depositEndTime: bigint,
    withdrawEndTime: bigint,
    lpVestStartTime: bigint,
    lpVestEndTime: bigint
  ] & {
    depositStartTime: bigint;
    depositEndTime: bigint;
    withdrawEndTime: bigint;
    lpVestStartTime: bigint;
    lpVestEndTime: bigint;
  };

  export type StateStruct = {
    totalVrtxDeposited: BigNumberish;
    totalUsdcDeposited: BigNumberish;
    totalLpMinted: BigNumberish;
    totalLpWithdrawn: BigNumberish;
  };

  export type StateStructOutput = [
    totalVrtxDeposited: bigint,
    totalUsdcDeposited: bigint,
    totalLpMinted: bigint,
    totalLpWithdrawn: bigint
  ] & {
    totalVrtxDeposited: bigint;
    totalUsdcDeposited: bigint;
    totalLpMinted: bigint;
    totalLpWithdrawn: bigint;
  };
}

export interface ILBAContractInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "depositUsdc"
      | "depositVrtx"
      | "getConfig"
      | "getStage"
      | "getState"
      | "lockedLpBalance"
      | "lpBalance"
      | "maxWithdrawableUsdc"
      | "vrtxInitialPriceX18"
      | "withdrawLiquidity"
      | "withdrawUsdc"
      | "withdrawableLpBalance"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "depositUsdc",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositVrtx",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getConfig", values?: undefined): string;
  encodeFunctionData(functionFragment: "getStage", values?: undefined): string;
  encodeFunctionData(functionFragment: "getState", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lockedLpBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lpBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxWithdrawableUsdc",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vrtxInitialPriceX18",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawUsdc",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawableLpBalance",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "depositUsdc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositVrtx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getStage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockedLpBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lpBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxWithdrawableUsdc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vrtxInitialPriceX18",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawUsdc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawableLpBalance",
    data: BytesLike
  ): Result;
}

export interface ILBAContract extends BaseContract {
  connect(runner?: ContractRunner | null): ILBAContract;
  waitForDeployment(): Promise<this>;

  interface: ILBAContractInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  depositUsdc: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  depositVrtx: TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getConfig: TypedContractMethod<[], [ILBA.ConfigStructOutput], "nonpayable">;

  getStage: TypedContractMethod<[], [bigint], "view">;

  getState: TypedContractMethod<[], [ILBA.StateStructOutput], "nonpayable">;

  lockedLpBalance: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  lpBalance: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  maxWithdrawableUsdc: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  vrtxInitialPriceX18: TypedContractMethod<[], [bigint], "view">;

  withdrawLiquidity: TypedContractMethod<
    [lpAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawUsdc: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawableLpBalance: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "depositUsdc"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "depositVrtx"
  ): TypedContractMethod<
    [account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getConfig"
  ): TypedContractMethod<[], [ILBA.ConfigStructOutput], "nonpayable">;
  getFunction(
    nameOrSignature: "getStage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getState"
  ): TypedContractMethod<[], [ILBA.StateStructOutput], "nonpayable">;
  getFunction(
    nameOrSignature: "lockedLpBalance"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "lpBalance"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxWithdrawableUsdc"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "vrtxInitialPriceX18"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawLiquidity"
  ): TypedContractMethod<[lpAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawUsdc"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawableLpBalance"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;

  filters: {};
}
