/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IEndpoint {
  export type BurnLpStruct = {
    sender: BytesLike;
    productId: BigNumberish;
    amount: BigNumberish;
    nonce: BigNumberish;
  };

  export type BurnLpStructOutput = [
    sender: string,
    productId: bigint,
    amount: bigint,
    nonce: bigint
  ] & { sender: string; productId: bigint; amount: bigint; nonce: bigint };

  export type BurnLpAndTransferStruct = {
    sender: BytesLike;
    productId: BigNumberish;
    amount: BigNumberish;
    recipient: BytesLike;
  };

  export type BurnLpAndTransferStructOutput = [
    sender: string,
    productId: bigint,
    amount: bigint,
    recipient: string
  ] & { sender: string; productId: bigint; amount: bigint; recipient: string };

  export type ClaimSequencerFeesStruct = { subaccount: BytesLike };

  export type ClaimSequencerFeesStructOutput = [subaccount: string] & {
    subaccount: string;
  };

  export type DepositCollateralStruct = {
    sender: BytesLike;
    productId: BigNumberish;
    amount: BigNumberish;
  };

  export type DepositCollateralStructOutput = [
    sender: string,
    productId: bigint,
    amount: bigint
  ] & { sender: string; productId: bigint; amount: bigint };

  export type DepositInsuranceStruct = { amount: BigNumberish };

  export type DepositInsuranceStructOutput = [amount: bigint] & {
    amount: bigint;
  };

  export type PricesStruct = {
    spotPriceX18: BigNumberish;
    perpPriceX18: BigNumberish;
  };

  export type PricesStructOutput = [
    spotPriceX18: bigint,
    perpPriceX18: bigint
  ] & { spotPriceX18: bigint; perpPriceX18: bigint };

  export type LiquidateSubaccountStruct = {
    sender: BytesLike;
    liquidatee: BytesLike;
    mode: BigNumberish;
    healthGroup: BigNumberish;
    amount: BigNumberish;
    nonce: BigNumberish;
  };

  export type LiquidateSubaccountStructOutput = [
    sender: string,
    liquidatee: string,
    mode: bigint,
    healthGroup: bigint,
    amount: bigint,
    nonce: bigint
  ] & {
    sender: string;
    liquidatee: string;
    mode: bigint;
    healthGroup: bigint;
    amount: bigint;
    nonce: bigint;
  };

  export type MintLpStruct = {
    sender: BytesLike;
    productId: BigNumberish;
    amountBase: BigNumberish;
    quoteAmountLow: BigNumberish;
    quoteAmountHigh: BigNumberish;
    nonce: BigNumberish;
  };

  export type MintLpStructOutput = [
    sender: string,
    productId: bigint,
    amountBase: bigint,
    quoteAmountLow: bigint,
    quoteAmountHigh: bigint,
    nonce: bigint
  ] & {
    sender: string;
    productId: bigint;
    amountBase: bigint;
    quoteAmountLow: bigint;
    quoteAmountHigh: bigint;
    nonce: bigint;
  };

  export type SettlePnlStruct = {
    subaccounts: BytesLike[];
    productIds: BigNumberish[];
  };

  export type SettlePnlStructOutput = [
    subaccounts: string[],
    productIds: bigint[]
  ] & { subaccounts: string[]; productIds: bigint[] };

  export type UpdateFeeRatesStruct = {
    user: AddressLike;
    productId: BigNumberish;
    makerRateX18: BigNumberish;
    takerRateX18: BigNumberish;
  };

  export type UpdateFeeRatesStructOutput = [
    user: string,
    productId: bigint,
    makerRateX18: bigint,
    takerRateX18: bigint
  ] & {
    user: string;
    productId: bigint;
    makerRateX18: bigint;
    takerRateX18: bigint;
  };

  export type WithdrawCollateralStruct = {
    sender: BytesLike;
    productId: BigNumberish;
    amount: BigNumberish;
    nonce: BigNumberish;
  };

  export type WithdrawCollateralStructOutput = [
    sender: string,
    productId: bigint,
    amount: bigint,
    nonce: bigint
  ] & { sender: string; productId: bigint; amount: bigint; nonce: bigint };
}

export declare namespace RiskHelper {
  export type RiskStruct = {
    longWeightInitialX18: BigNumberish;
    shortWeightInitialX18: BigNumberish;
    longWeightMaintenanceX18: BigNumberish;
    shortWeightMaintenanceX18: BigNumberish;
    largePositionPenaltyX18: BigNumberish;
  };

  export type RiskStructOutput = [
    longWeightInitialX18: bigint,
    shortWeightInitialX18: bigint,
    longWeightMaintenanceX18: bigint,
    shortWeightMaintenanceX18: bigint,
    largePositionPenaltyX18: bigint
  ] & {
    longWeightInitialX18: bigint;
    shortWeightInitialX18: bigint;
    longWeightMaintenanceX18: bigint;
    shortWeightMaintenanceX18: bigint;
    largePositionPenaltyX18: bigint;
  };
}

export declare namespace IClearinghouseState {
  export type RiskStoreStruct = {
    longWeightInitial: BigNumberish;
    shortWeightInitial: BigNumberish;
    longWeightMaintenance: BigNumberish;
    shortWeightMaintenance: BigNumberish;
    largePositionPenalty: BigNumberish;
  };

  export type RiskStoreStructOutput = [
    longWeightInitial: bigint,
    shortWeightInitial: bigint,
    longWeightMaintenance: bigint,
    shortWeightMaintenance: bigint,
    largePositionPenalty: bigint
  ] & {
    longWeightInitial: bigint;
    shortWeightInitial: bigint;
    longWeightMaintenance: bigint;
    shortWeightMaintenance: bigint;
    largePositionPenalty: bigint;
  };
}

export interface IClearinghouseInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addEngine"
      | "burnLp"
      | "burnLpAndTransfer"
      | "claimSequencerFees"
      | "depositCollateral"
      | "depositInsurance"
      | "getEndpoint"
      | "getEngineByProduct"
      | "getEngineByType"
      | "getHealth"
      | "getInsurance"
      | "getMaxHealthGroup"
      | "getNumProducts"
      | "getOraclePriceX18"
      | "getOraclePricesX18"
      | "getOrderbook"
      | "getQuote"
      | "getRisk"
      | "getSupportedEngines"
      | "getVersion"
      | "liquidateSubaccount"
      | "mintLp"
      | "mintLpSlowMode"
      | "modifyProductConfig"
      | "registerProductForId"
      | "settlePnl"
      | "updateFeeRates"
      | "withdrawCollateral"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ClearinghouseInitialized"
      | "Liquidation"
      | "ModifyCollateral"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addEngine",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnLp",
    values: [IEndpoint.BurnLpStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "burnLpAndTransfer",
    values: [IEndpoint.BurnLpAndTransferStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "claimSequencerFees",
    values: [IEndpoint.ClaimSequencerFeesStruct, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "depositCollateral",
    values: [IEndpoint.DepositCollateralStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "depositInsurance",
    values: [IEndpoint.DepositInsuranceStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getEndpoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEngineByProduct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEngineByType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getHealth",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getInsurance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxHealthGroup",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumProducts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOraclePriceX18",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOraclePricesX18",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderbook",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getQuote", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getRisk",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedEngines",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidateSubaccount",
    values: [IEndpoint.LiquidateSubaccountStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "mintLp",
    values: [IEndpoint.MintLpStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "mintLpSlowMode",
    values: [IEndpoint.MintLpStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyProductConfig",
    values: [BigNumberish, IClearinghouseState.RiskStoreStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "registerProductForId",
    values: [AddressLike, IClearinghouseState.RiskStoreStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settlePnl",
    values: [IEndpoint.SettlePnlStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeeRates",
    values: [IEndpoint.UpdateFeeRatesStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawCollateral",
    values: [IEndpoint.WithdrawCollateralStruct]
  ): string;

  decodeFunctionResult(functionFragment: "addEngine", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnLp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnLpAndTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimSequencerFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositInsurance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEndpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEngineByProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEngineByType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHealth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInsurance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxHealthGroup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumProducts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOraclePriceX18",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOraclePricesX18",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderbook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getQuote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRisk", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedEngines",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidateSubaccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintLp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintLpSlowMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "modifyProductConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerProductForId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settlePnl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawCollateral",
    data: BytesLike
  ): Result;
}

export namespace ClearinghouseInitializedEvent {
  export type InputTuple = [
    endpoint: AddressLike,
    quote: AddressLike,
    fees: AddressLike
  ];
  export type OutputTuple = [endpoint: string, quote: string, fees: string];
  export interface OutputObject {
    endpoint: string;
    quote: string;
    fees: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidationEvent {
  export type InputTuple = [
    liquidatorSubaccount: BytesLike,
    liquidateeSubaccount: BytesLike,
    mode: BigNumberish,
    healthGroup: BigNumberish,
    amount: BigNumberish,
    amountQuote: BigNumberish,
    insuranceCover: BigNumberish
  ];
  export type OutputTuple = [
    liquidatorSubaccount: string,
    liquidateeSubaccount: string,
    mode: bigint,
    healthGroup: bigint,
    amount: bigint,
    amountQuote: bigint,
    insuranceCover: bigint
  ];
  export interface OutputObject {
    liquidatorSubaccount: string;
    liquidateeSubaccount: string;
    mode: bigint;
    healthGroup: bigint;
    amount: bigint;
    amountQuote: bigint;
    insuranceCover: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModifyCollateralEvent {
  export type InputTuple = [
    amount: BigNumberish,
    subaccount: BytesLike,
    productId: BigNumberish
  ];
  export type OutputTuple = [
    amount: bigint,
    subaccount: string,
    productId: bigint
  ];
  export interface OutputObject {
    amount: bigint;
    subaccount: string;
    productId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IClearinghouse extends BaseContract {
  connect(runner?: ContractRunner | null): IClearinghouse;
  waitForDeployment(): Promise<this>;

  interface: IClearinghouseInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addEngine: TypedContractMethod<
    [engine: AddressLike, engineType: BigNumberish],
    [void],
    "nonpayable"
  >;

  burnLp: TypedContractMethod<
    [tx: IEndpoint.BurnLpStruct],
    [void],
    "nonpayable"
  >;

  burnLpAndTransfer: TypedContractMethod<
    [tx: IEndpoint.BurnLpAndTransferStruct],
    [void],
    "nonpayable"
  >;

  claimSequencerFees: TypedContractMethod<
    [tx: IEndpoint.ClaimSequencerFeesStruct, fees: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  depositCollateral: TypedContractMethod<
    [tx: IEndpoint.DepositCollateralStruct],
    [void],
    "nonpayable"
  >;

  depositInsurance: TypedContractMethod<
    [tx: IEndpoint.DepositInsuranceStruct],
    [void],
    "nonpayable"
  >;

  getEndpoint: TypedContractMethod<[], [string], "view">;

  getEngineByProduct: TypedContractMethod<
    [productId: BigNumberish],
    [string],
    "view"
  >;

  getEngineByType: TypedContractMethod<
    [engineType: BigNumberish],
    [string],
    "view"
  >;

  getHealth: TypedContractMethod<
    [subaccount: BytesLike, healthType: BigNumberish],
    [bigint],
    "view"
  >;

  getInsurance: TypedContractMethod<[], [bigint], "view">;

  getMaxHealthGroup: TypedContractMethod<[], [bigint], "view">;

  getNumProducts: TypedContractMethod<[], [bigint], "view">;

  getOraclePriceX18: TypedContractMethod<
    [productId: BigNumberish],
    [bigint],
    "view"
  >;

  getOraclePricesX18: TypedContractMethod<
    [healthGroup: BigNumberish],
    [IEndpoint.PricesStructOutput],
    "view"
  >;

  getOrderbook: TypedContractMethod<
    [productId: BigNumberish],
    [string],
    "view"
  >;

  getQuote: TypedContractMethod<[], [string], "view">;

  getRisk: TypedContractMethod<
    [productId: BigNumberish],
    [RiskHelper.RiskStructOutput],
    "view"
  >;

  getSupportedEngines: TypedContractMethod<[], [bigint[]], "view">;

  getVersion: TypedContractMethod<[], [bigint], "nonpayable">;

  liquidateSubaccount: TypedContractMethod<
    [tx: IEndpoint.LiquidateSubaccountStruct],
    [void],
    "nonpayable"
  >;

  mintLp: TypedContractMethod<
    [tx: IEndpoint.MintLpStruct],
    [void],
    "nonpayable"
  >;

  mintLpSlowMode: TypedContractMethod<
    [tx: IEndpoint.MintLpStruct],
    [void],
    "nonpayable"
  >;

  modifyProductConfig: TypedContractMethod<
    [productId: BigNumberish, riskStore: IClearinghouseState.RiskStoreStruct],
    [void],
    "nonpayable"
  >;

  registerProductForId: TypedContractMethod<
    [
      book: AddressLike,
      riskStore: IClearinghouseState.RiskStoreStruct,
      healthGroup: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  settlePnl: TypedContractMethod<
    [tx: IEndpoint.SettlePnlStruct],
    [void],
    "nonpayable"
  >;

  updateFeeRates: TypedContractMethod<
    [tx: IEndpoint.UpdateFeeRatesStruct],
    [void],
    "nonpayable"
  >;

  withdrawCollateral: TypedContractMethod<
    [tx: IEndpoint.WithdrawCollateralStruct],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addEngine"
  ): TypedContractMethod<
    [engine: AddressLike, engineType: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "burnLp"
  ): TypedContractMethod<[tx: IEndpoint.BurnLpStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "burnLpAndTransfer"
  ): TypedContractMethod<
    [tx: IEndpoint.BurnLpAndTransferStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimSequencerFees"
  ): TypedContractMethod<
    [tx: IEndpoint.ClaimSequencerFeesStruct, fees: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositCollateral"
  ): TypedContractMethod<
    [tx: IEndpoint.DepositCollateralStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositInsurance"
  ): TypedContractMethod<
    [tx: IEndpoint.DepositInsuranceStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getEndpoint"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getEngineByProduct"
  ): TypedContractMethod<[productId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getEngineByType"
  ): TypedContractMethod<[engineType: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getHealth"
  ): TypedContractMethod<
    [subaccount: BytesLike, healthType: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getInsurance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMaxHealthGroup"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNumProducts"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOraclePriceX18"
  ): TypedContractMethod<[productId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOraclePricesX18"
  ): TypedContractMethod<
    [healthGroup: BigNumberish],
    [IEndpoint.PricesStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOrderbook"
  ): TypedContractMethod<[productId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getQuote"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getRisk"
  ): TypedContractMethod<
    [productId: BigNumberish],
    [RiskHelper.RiskStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSupportedEngines"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getVersion"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "liquidateSubaccount"
  ): TypedContractMethod<
    [tx: IEndpoint.LiquidateSubaccountStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintLp"
  ): TypedContractMethod<[tx: IEndpoint.MintLpStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "mintLpSlowMode"
  ): TypedContractMethod<[tx: IEndpoint.MintLpStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "modifyProductConfig"
  ): TypedContractMethod<
    [productId: BigNumberish, riskStore: IClearinghouseState.RiskStoreStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerProductForId"
  ): TypedContractMethod<
    [
      book: AddressLike,
      riskStore: IClearinghouseState.RiskStoreStruct,
      healthGroup: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "settlePnl"
  ): TypedContractMethod<[tx: IEndpoint.SettlePnlStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateFeeRates"
  ): TypedContractMethod<
    [tx: IEndpoint.UpdateFeeRatesStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawCollateral"
  ): TypedContractMethod<
    [tx: IEndpoint.WithdrawCollateralStruct],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ClearinghouseInitialized"
  ): TypedContractEvent<
    ClearinghouseInitializedEvent.InputTuple,
    ClearinghouseInitializedEvent.OutputTuple,
    ClearinghouseInitializedEvent.OutputObject
  >;
  getEvent(
    key: "Liquidation"
  ): TypedContractEvent<
    LiquidationEvent.InputTuple,
    LiquidationEvent.OutputTuple,
    LiquidationEvent.OutputObject
  >;
  getEvent(
    key: "ModifyCollateral"
  ): TypedContractEvent<
    ModifyCollateralEvent.InputTuple,
    ModifyCollateralEvent.OutputTuple,
    ModifyCollateralEvent.OutputObject
  >;

  filters: {
    "ClearinghouseInitialized(address,address,address)": TypedContractEvent<
      ClearinghouseInitializedEvent.InputTuple,
      ClearinghouseInitializedEvent.OutputTuple,
      ClearinghouseInitializedEvent.OutputObject
    >;
    ClearinghouseInitialized: TypedContractEvent<
      ClearinghouseInitializedEvent.InputTuple,
      ClearinghouseInitializedEvent.OutputTuple,
      ClearinghouseInitializedEvent.OutputObject
    >;

    "Liquidation(bytes32,bytes32,uint8,uint32,int128,int128,int128)": TypedContractEvent<
      LiquidationEvent.InputTuple,
      LiquidationEvent.OutputTuple,
      LiquidationEvent.OutputObject
    >;
    Liquidation: TypedContractEvent<
      LiquidationEvent.InputTuple,
      LiquidationEvent.OutputTuple,
      LiquidationEvent.OutputObject
    >;

    "ModifyCollateral(int128,bytes32,uint32)": TypedContractEvent<
      ModifyCollateralEvent.InputTuple,
      ModifyCollateralEvent.OutputTuple,
      ModifyCollateralEvent.OutputObject
    >;
    ModifyCollateral: TypedContractEvent<
      ModifyCollateralEvent.InputTuple,
      ModifyCollateralEvent.OutputTuple,
      ModifyCollateralEvent.OutputObject
    >;
  };
}
