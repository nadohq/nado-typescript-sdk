/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IStaking {
  export type GlobalRewardsBreakdownStruct = {
    distributionTime: bigint;
    rewardsAmount: bigint;
  };

  export type GlobalRewardsBreakdownStructOutput = [
    distributionTime: bigint,
    rewardsAmount: bigint
  ] & { distributionTime: bigint; rewardsAmount: bigint };

  export type LastActionTimesStruct = {
    lastStakeTime: bigint;
    lastWithdrawTime: bigint;
  };

  export type LastActionTimesStructOutput = [
    lastStakeTime: bigint,
    lastWithdrawTime: bigint
  ] & { lastStakeTime: bigint; lastWithdrawTime: bigint };

  export type WithdrawnVrtxStatesStruct = {
    vrtxClaimable: bigint;
    vrtxPendingUnlock: bigint;
  };

  export type WithdrawnVrtxStatesStructOutput = [
    vrtxClaimable: bigint,
    vrtxPendingUnlock: bigint
  ] & { vrtxClaimable: bigint; vrtxPendingUnlock: bigint };
}

export interface IStakingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claimUsdc"
      | "claimUsdcAndStake"
      | "claimVrtx"
      | "getEstimatedVrtxToStake"
      | "getGlobalRewardsBreakdown"
      | "getLastActionTimes"
      | "getRewardsBreakdown"
      | "getScore"
      | "getTotalScore"
      | "getTotalVrtxStaked"
      | "getUsdcClaimable"
      | "getV2Bonus"
      | "getV2BonusDeadline"
      | "getV2StartTime"
      | "getVrtxStaked"
      | "getWithdrawLockingTime"
      | "getWithdrawnVrtxStates"
      | "migrateToV2"
      | "migrateToV2WithNewWallet"
      | "stake"
      | "stakeAs"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "claimUsdc", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimUsdcAndStake",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claimVrtx", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getEstimatedVrtxToStake",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getGlobalRewardsBreakdown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastActionTimes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardsBreakdown",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getScore",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalScore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalVrtxStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUsdcClaimable",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getV2Bonus",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getV2BonusDeadline",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getV2StartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVrtxStaked",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawLockingTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawnVrtxStates",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "migrateToV2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrateToV2WithNewWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [bigint]): string;
  encodeFunctionData(
    functionFragment: "stakeAs",
    values: [AddressLike, bigint]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [bigint]
  ): string;

  decodeFunctionResult(functionFragment: "claimUsdc", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimUsdcAndStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimVrtx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEstimatedVrtxToStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlobalRewardsBreakdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastActionTimes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardsBreakdown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getScore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalVrtxStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUsdcClaimable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getV2Bonus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getV2BonusDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getV2StartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVrtxStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawLockingTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawnVrtxStates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateToV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateToV2WithNewWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeAs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export interface IStaking extends BaseContract {
  connect(runner?: ContractRunner | null): IStaking;
  waitForDeployment(): Promise<this>;

  interface: IStakingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claimUsdc: TypedContractMethod<[], [void], "nonpayable">;

  claimUsdcAndStake: TypedContractMethod<[], [void], "nonpayable">;

  claimVrtx: TypedContractMethod<[], [void], "nonpayable">;

  getEstimatedVrtxToStake: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "nonpayable"
  >;

  getGlobalRewardsBreakdown: TypedContractMethod<
    [],
    [IStaking.GlobalRewardsBreakdownStructOutput[]],
    "view"
  >;

  getLastActionTimes: TypedContractMethod<
    [account: AddressLike],
    [IStaking.LastActionTimesStructOutput],
    "view"
  >;

  getRewardsBreakdown: TypedContractMethod<
    [account: AddressLike],
    [bigint[]],
    "view"
  >;

  getScore: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  getTotalScore: TypedContractMethod<[], [bigint], "view">;

  getTotalVrtxStaked: TypedContractMethod<[], [bigint], "view">;

  getUsdcClaimable: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  getV2Bonus: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  getV2BonusDeadline: TypedContractMethod<[], [bigint], "view">;

  getV2StartTime: TypedContractMethod<[], [bigint], "view">;

  getVrtxStaked: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  getWithdrawLockingTime: TypedContractMethod<[], [bigint], "view">;

  getWithdrawnVrtxStates: TypedContractMethod<
    [account: AddressLike],
    [IStaking.WithdrawnVrtxStatesStructOutput],
    "view"
  >;

  migrateToV2: TypedContractMethod<[], [void], "nonpayable">;

  migrateToV2WithNewWallet: TypedContractMethod<
    [staker: AddressLike],
    [void],
    "nonpayable"
  >;

  stake: TypedContractMethod<[amount: bigint], [void], "nonpayable">;

  stakeAs: TypedContractMethod<
    [staker: AddressLike, amount: bigint],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[amount: bigint], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimUsdc"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimUsdcAndStake"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimVrtx"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getEstimatedVrtxToStake"
  ): TypedContractMethod<[account: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "getGlobalRewardsBreakdown"
  ): TypedContractMethod<
    [],
    [IStaking.GlobalRewardsBreakdownStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLastActionTimes"
  ): TypedContractMethod<
    [account: AddressLike],
    [IStaking.LastActionTimesStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRewardsBreakdown"
  ): TypedContractMethod<[account: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getScore"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalScore"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalVrtxStaked"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUsdcClaimable"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getV2Bonus"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getV2BonusDeadline"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getV2StartTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVrtxStaked"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getWithdrawLockingTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getWithdrawnVrtxStates"
  ): TypedContractMethod<
    [account: AddressLike],
    [IStaking.WithdrawnVrtxStatesStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "migrateToV2"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "migrateToV2WithNewWallet"
  ): TypedContractMethod<[staker: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stake"
  ): TypedContractMethod<[amount: bigint], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stakeAs"
  ): TypedContractMethod<
    [staker: AddressLike, amount: bigint],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[amount: bigint], [void], "nonpayable">;

  filters: {};
}
