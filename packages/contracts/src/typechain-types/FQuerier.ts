/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace RiskHelper {
  export type RiskStruct = {
    longWeightInitialX18: BigNumberish;
    shortWeightInitialX18: BigNumberish;
    longWeightMaintenanceX18: BigNumberish;
    shortWeightMaintenanceX18: BigNumberish;
    largePositionPenaltyX18: BigNumberish;
  };

  export type RiskStructOutput = [
    longWeightInitialX18: bigint,
    shortWeightInitialX18: bigint,
    longWeightMaintenanceX18: bigint,
    shortWeightMaintenanceX18: bigint,
    largePositionPenaltyX18: bigint
  ] & {
    longWeightInitialX18: bigint;
    shortWeightInitialX18: bigint;
    longWeightMaintenanceX18: bigint;
    shortWeightMaintenanceX18: bigint;
    largePositionPenaltyX18: bigint;
  };
}

export declare namespace ISpotEngine {
  export type ConfigStruct = {
    token: AddressLike;
    interestInflectionUtilX18: BigNumberish;
    interestFloorX18: BigNumberish;
    interestSmallCapX18: BigNumberish;
    interestLargeCapX18: BigNumberish;
  };

  export type ConfigStructOutput = [
    token: string,
    interestInflectionUtilX18: bigint,
    interestFloorX18: bigint,
    interestSmallCapX18: bigint,
    interestLargeCapX18: bigint
  ] & {
    token: string;
    interestInflectionUtilX18: bigint;
    interestFloorX18: bigint;
    interestSmallCapX18: bigint;
    interestLargeCapX18: bigint;
  };

  export type StateStruct = {
    cumulativeDepositsMultiplierX18: BigNumberish;
    cumulativeBorrowsMultiplierX18: BigNumberish;
    totalDepositsNormalized: BigNumberish;
    totalBorrowsNormalized: BigNumberish;
  };

  export type StateStructOutput = [
    cumulativeDepositsMultiplierX18: bigint,
    cumulativeBorrowsMultiplierX18: bigint,
    totalDepositsNormalized: bigint,
    totalBorrowsNormalized: bigint
  ] & {
    cumulativeDepositsMultiplierX18: bigint;
    cumulativeBorrowsMultiplierX18: bigint;
    totalDepositsNormalized: bigint;
    totalBorrowsNormalized: bigint;
  };

  export type BalanceStruct = {
    amount: BigNumberish;
    lastCumulativeMultiplierX18: BigNumberish;
  };

  export type BalanceStructOutput = [
    amount: bigint,
    lastCumulativeMultiplierX18: bigint
  ] & { amount: bigint; lastCumulativeMultiplierX18: bigint };

  export type LpStateStruct = {
    supply: BigNumberish;
    quote: ISpotEngine.BalanceStruct;
    base: ISpotEngine.BalanceStruct;
  };

  export type LpStateStructOutput = [
    supply: bigint,
    quote: ISpotEngine.BalanceStructOutput,
    base: ISpotEngine.BalanceStructOutput
  ] & {
    supply: bigint;
    quote: ISpotEngine.BalanceStructOutput;
    base: ISpotEngine.BalanceStructOutput;
  };

  export type LpBalanceStruct = { amount: BigNumberish };

  export type LpBalanceStructOutput = [amount: bigint] & { amount: bigint };
}

export declare namespace FQuerier {
  export type BookInfoStruct = {
    sizeIncrement: BigNumberish;
    priceIncrementX18: BigNumberish;
    minSize: BigNumberish;
    collectedFees: BigNumberish;
    lpSpreadX18: BigNumberish;
  };

  export type BookInfoStructOutput = [
    sizeIncrement: bigint,
    priceIncrementX18: bigint,
    minSize: bigint,
    collectedFees: bigint,
    lpSpreadX18: bigint
  ] & {
    sizeIncrement: bigint;
    priceIncrementX18: bigint;
    minSize: bigint;
    collectedFees: bigint;
    lpSpreadX18: bigint;
  };

  export type SpotProductStruct = {
    productId: BigNumberish;
    oraclePriceX18: BigNumberish;
    risk: RiskHelper.RiskStruct;
    config: ISpotEngine.ConfigStruct;
    state: ISpotEngine.StateStruct;
    lpState: ISpotEngine.LpStateStruct;
    bookInfo: FQuerier.BookInfoStruct;
  };

  export type SpotProductStructOutput = [
    productId: bigint,
    oraclePriceX18: bigint,
    risk: RiskHelper.RiskStructOutput,
    config: ISpotEngine.ConfigStructOutput,
    state: ISpotEngine.StateStructOutput,
    lpState: ISpotEngine.LpStateStructOutput,
    bookInfo: FQuerier.BookInfoStructOutput
  ] & {
    productId: bigint;
    oraclePriceX18: bigint;
    risk: RiskHelper.RiskStructOutput;
    config: ISpotEngine.ConfigStructOutput;
    state: ISpotEngine.StateStructOutput;
    lpState: ISpotEngine.LpStateStructOutput;
    bookInfo: FQuerier.BookInfoStructOutput;
  };

  export type PerpProductStruct = {
    productId: BigNumberish;
    oraclePriceX18: BigNumberish;
    risk: RiskHelper.RiskStruct;
    state: IPerpEngine.StateStruct;
    lpState: IPerpEngine.LpStateStruct;
    bookInfo: FQuerier.BookInfoStruct;
  };

  export type PerpProductStructOutput = [
    productId: bigint,
    oraclePriceX18: bigint,
    risk: RiskHelper.RiskStructOutput,
    state: IPerpEngine.StateStructOutput,
    lpState: IPerpEngine.LpStateStructOutput,
    bookInfo: FQuerier.BookInfoStructOutput
  ] & {
    productId: bigint;
    oraclePriceX18: bigint;
    risk: RiskHelper.RiskStructOutput;
    state: IPerpEngine.StateStructOutput;
    lpState: IPerpEngine.LpStateStructOutput;
    bookInfo: FQuerier.BookInfoStructOutput;
  };

  export type ProductInfoStruct = {
    spotProducts: FQuerier.SpotProductStruct[];
    perpProducts: FQuerier.PerpProductStruct[];
  };

  export type ProductInfoStructOutput = [
    spotProducts: FQuerier.SpotProductStructOutput[],
    perpProducts: FQuerier.PerpProductStructOutput[]
  ] & {
    spotProducts: FQuerier.SpotProductStructOutput[];
    perpProducts: FQuerier.PerpProductStructOutput[];
  };

  export type PerpBalanceStruct = {
    productId: BigNumberish;
    lpBalance: IPerpEngine.LpBalanceStruct;
    balance: IPerpEngine.BalanceStruct;
  };

  export type PerpBalanceStructOutput = [
    productId: bigint,
    lpBalance: IPerpEngine.LpBalanceStructOutput,
    balance: IPerpEngine.BalanceStructOutput
  ] & {
    productId: bigint;
    lpBalance: IPerpEngine.LpBalanceStructOutput;
    balance: IPerpEngine.BalanceStructOutput;
  };

  export type SpotBalanceStruct = {
    productId: BigNumberish;
    lpBalance: ISpotEngine.LpBalanceStruct;
    balance: ISpotEngine.BalanceStruct;
  };

  export type SpotBalanceStructOutput = [
    productId: bigint,
    lpBalance: ISpotEngine.LpBalanceStructOutput,
    balance: ISpotEngine.BalanceStructOutput
  ] & {
    productId: bigint;
    lpBalance: ISpotEngine.LpBalanceStructOutput;
    balance: ISpotEngine.BalanceStructOutput;
  };

  export type HealthInfoStruct = {
    assets: BigNumberish;
    liabilities: BigNumberish;
    health: BigNumberish;
  };

  export type HealthInfoStructOutput = [
    assets: bigint,
    liabilities: bigint,
    health: bigint
  ] & { assets: bigint; liabilities: bigint; health: bigint };

  export type SubaccountInfoStruct = {
    subaccount: BytesLike;
    exists: boolean;
    healths: FQuerier.HealthInfoStruct[];
    healthContributions: BigNumberish[][];
    spotCount: BigNumberish;
    perpCount: BigNumberish;
    spotBalances: FQuerier.SpotBalanceStruct[];
    perpBalances: FQuerier.PerpBalanceStruct[];
    spotProducts: FQuerier.SpotProductStruct[];
    perpProducts: FQuerier.PerpProductStruct[];
  };

  export type SubaccountInfoStructOutput = [
    subaccount: string,
    exists: boolean,
    healths: FQuerier.HealthInfoStructOutput[],
    healthContributions: bigint[][],
    spotCount: bigint,
    perpCount: bigint,
    spotBalances: FQuerier.SpotBalanceStructOutput[],
    perpBalances: FQuerier.PerpBalanceStructOutput[],
    spotProducts: FQuerier.SpotProductStructOutput[],
    perpProducts: FQuerier.PerpProductStructOutput[]
  ] & {
    subaccount: string;
    exists: boolean;
    healths: FQuerier.HealthInfoStructOutput[];
    healthContributions: bigint[][];
    spotCount: bigint;
    perpCount: bigint;
    spotBalances: FQuerier.SpotBalanceStructOutput[];
    perpBalances: FQuerier.PerpBalanceStructOutput[];
    spotProducts: FQuerier.SpotProductStructOutput[];
    perpProducts: FQuerier.PerpProductStructOutput[];
  };
}

export declare namespace IPerpEngine {
  export type StateStruct = {
    cumulativeFundingLongX18: BigNumberish;
    cumulativeFundingShortX18: BigNumberish;
    availableSettle: BigNumberish;
    openInterest: BigNumberish;
  };

  export type StateStructOutput = [
    cumulativeFundingLongX18: bigint,
    cumulativeFundingShortX18: bigint,
    availableSettle: bigint,
    openInterest: bigint
  ] & {
    cumulativeFundingLongX18: bigint;
    cumulativeFundingShortX18: bigint;
    availableSettle: bigint;
    openInterest: bigint;
  };

  export type LpStateStruct = {
    supply: BigNumberish;
    lastCumulativeFundingX18: BigNumberish;
    cumulativeFundingPerLpX18: BigNumberish;
    base: BigNumberish;
    quote: BigNumberish;
  };

  export type LpStateStructOutput = [
    supply: bigint,
    lastCumulativeFundingX18: bigint,
    cumulativeFundingPerLpX18: bigint,
    base: bigint,
    quote: bigint
  ] & {
    supply: bigint;
    lastCumulativeFundingX18: bigint;
    cumulativeFundingPerLpX18: bigint;
    base: bigint;
    quote: bigint;
  };

  export type LpBalanceStruct = {
    amount: BigNumberish;
    lastCumulativeFundingX18: BigNumberish;
  };

  export type LpBalanceStructOutput = [
    amount: bigint,
    lastCumulativeFundingX18: bigint
  ] & { amount: bigint; lastCumulativeFundingX18: bigint };

  export type BalanceStruct = {
    amount: BigNumberish;
    vQuoteBalance: BigNumberish;
    lastCumulativeFundingX18: BigNumberish;
  };

  export type BalanceStructOutput = [
    amount: bigint,
    vQuoteBalance: bigint,
    lastCumulativeFundingX18: bigint
  ] & {
    amount: bigint;
    vQuoteBalance: bigint;
    lastCumulativeFundingX18: bigint;
  };
}

export interface FQuerierInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getAllProducts"
      | "getBookInfo"
      | "getClearinghouse"
      | "getPerpBalance"
      | "getPerpBalances"
      | "getPerpProduct"
      | "getPerpProducts"
      | "getSpotBalance"
      | "getSpotBalances"
      | "getSpotProduct"
      | "getSpotProducts"
      | "getSubaccountInfo"
      | "getVersion"
      | "initialize"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAllProducts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBookInfo",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getClearinghouse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPerpBalance",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPerpBalances",
    values: [BytesLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPerpProduct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPerpProducts",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getSpotBalance",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSpotBalances",
    values: [BytesLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getSpotProduct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSpotProducts",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubaccountInfo",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAllProducts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBookInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClearinghouse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPerpBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPerpBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPerpProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPerpProducts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSpotBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSpotBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSpotProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSpotProducts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubaccountInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
}

export interface FQuerier extends BaseContract {
  connect(runner?: ContractRunner | null): FQuerier;
  waitForDeployment(): Promise<this>;

  interface: FQuerierInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAllProducts: TypedContractMethod<
    [],
    [FQuerier.ProductInfoStructOutput],
    "view"
  >;

  getBookInfo: TypedContractMethod<
    [productId: BigNumberish, engine: AddressLike],
    [FQuerier.BookInfoStructOutput],
    "view"
  >;

  getClearinghouse: TypedContractMethod<[], [string], "view">;

  getPerpBalance: TypedContractMethod<
    [subaccount: BytesLike, productId: BigNumberish],
    [FQuerier.PerpBalanceStructOutput],
    "view"
  >;

  getPerpBalances: TypedContractMethod<
    [subaccount: BytesLike, productIds: BigNumberish[]],
    [FQuerier.PerpBalanceStructOutput[]],
    "view"
  >;

  getPerpProduct: TypedContractMethod<
    [productId: BigNumberish],
    [FQuerier.PerpProductStructOutput],
    "view"
  >;

  getPerpProducts: TypedContractMethod<
    [productIds: BigNumberish[]],
    [FQuerier.PerpProductStructOutput[]],
    "view"
  >;

  getSpotBalance: TypedContractMethod<
    [subaccount: BytesLike, productId: BigNumberish],
    [FQuerier.SpotBalanceStructOutput],
    "view"
  >;

  getSpotBalances: TypedContractMethod<
    [subaccount: BytesLike, productIds: BigNumberish[]],
    [FQuerier.SpotBalanceStructOutput[]],
    "view"
  >;

  getSpotProduct: TypedContractMethod<
    [productId: BigNumberish],
    [FQuerier.SpotProductStructOutput],
    "view"
  >;

  getSpotProducts: TypedContractMethod<
    [productIds: BigNumberish[]],
    [FQuerier.SpotProductStructOutput[]],
    "view"
  >;

  getSubaccountInfo: TypedContractMethod<
    [subaccount: BytesLike],
    [FQuerier.SubaccountInfoStructOutput],
    "view"
  >;

  getVersion: TypedContractMethod<[], [bigint], "view">;

  initialize: TypedContractMethod<
    [_clearinghouse: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAllProducts"
  ): TypedContractMethod<[], [FQuerier.ProductInfoStructOutput], "view">;
  getFunction(
    nameOrSignature: "getBookInfo"
  ): TypedContractMethod<
    [productId: BigNumberish, engine: AddressLike],
    [FQuerier.BookInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getClearinghouse"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPerpBalance"
  ): TypedContractMethod<
    [subaccount: BytesLike, productId: BigNumberish],
    [FQuerier.PerpBalanceStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPerpBalances"
  ): TypedContractMethod<
    [subaccount: BytesLike, productIds: BigNumberish[]],
    [FQuerier.PerpBalanceStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPerpProduct"
  ): TypedContractMethod<
    [productId: BigNumberish],
    [FQuerier.PerpProductStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPerpProducts"
  ): TypedContractMethod<
    [productIds: BigNumberish[]],
    [FQuerier.PerpProductStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSpotBalance"
  ): TypedContractMethod<
    [subaccount: BytesLike, productId: BigNumberish],
    [FQuerier.SpotBalanceStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSpotBalances"
  ): TypedContractMethod<
    [subaccount: BytesLike, productIds: BigNumberish[]],
    [FQuerier.SpotBalanceStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSpotProduct"
  ): TypedContractMethod<
    [productId: BigNumberish],
    [FQuerier.SpotProductStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSpotProducts"
  ): TypedContractMethod<
    [productIds: BigNumberish[]],
    [FQuerier.SpotProductStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSubaccountInfo"
  ): TypedContractMethod<
    [subaccount: BytesLike],
    [FQuerier.SubaccountInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVersion"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[_clearinghouse: AddressLike], [void], "nonpayable">;

  filters: {};
}
